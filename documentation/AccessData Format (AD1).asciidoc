= AD1 specification
AccessData AD1 Format specification

:numbered!:
[abstract]
== Summary
This is a highly simplified, preliminary, and most likely flawed documentation of version 3 and 4 of the AccessData AD1 image file format.

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Petter Chr. Bjelland <post@pcbje.com>
| Classification: | Public
| Keywords: | AccessData Format, AD1
|===


[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author        | Date     | Comments
| 0.0.1   | P.C. Bjelland | May 2018 | Initial version
|===

:numbered:
== Introduction
The AccessData Format (AD1) is used to store media images.

The layout of this documentation is inspired by the EWF documentation.

Little endian.

=== Test version
The following version of programs were used to test the information within this document:

* FTK Imager 3.0 (Windows 10)

== Segment file

AD1 stores data in one or more segment files. Each segment file consists of:

* A file margin.
* One or more items.

The first segments contains an image header with some metadata.

=== File margin

All segments begins with a 512 byte header.

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value | Hashed | Description
| 0      | 15   |       | No     | Signature "ADSEGMENTEDFILE"
| 15     | 1    |       | No     | Padding
| 16     | 4    | 1     | No     | Unknown
| 20     | 4    | 2     | No     | Unknown
| 24     | 4    |       | No     | Segment number, starting at 1
| 28     | 4    |       | No     | Number of segments
| 32     | 2    | 0     | No     | Unknown
| 34     | 4    |       | No     | Segment size
| 38     | 2    | 0     | No     | Unknown
| 40     | 4    | 512   | No     | Unknown
| 44     | 468  | 0     | No     | Padding
|===

=== Image header

Only in first segment file.

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value  | Hashed | Description
| 0      | 14   |        | Yes    | Signature "ADLOGICALIMAGE"
| 14     | 2    |        | Yes    | Unknown
| 16     | 4    | 3 or 4 | Yes    | Format version
| 20     | 4    |        | Yes    | Unknown
| 24     | 4    | 65536  | Yes    | zlib chunk size
| 28     | 8    |        | Yes    | Image header length
| 36     | 8    |        | Yes    | Image header+info length
| 44     | 4    |        | Yes    | Length of image path (= N)
| 48     | 44   |        | Yes    | Unknown. Version 4 only
| 48/92  | N    |        | Yes    | Image path
|===

=== Item

==== Item header

Offsets ignore size of file margin.

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value | Hashed | Description
| 0      | 8   |        | Yes      | Offset next group (e.g. folder)
| 8      | 8   |        | Yes      | Offset next item in group
| 16     | 8   |        | Yes      | Offset end of compressed data
| 24     | 8   |        | Yes      | Offset start of compressed data
| 32     | 8   |        | Yes      | Decompressed size
| 40     | 4   |        | Yes      | Item type (see item types)
| 44     | 4   |        | Yes      | Length of item name (=N)
| 48     | N   |        | Yes      | Item name
| 48+N   | 8   |        | Yes      | Group index (e.g., folder)
|===

==== Compressed data

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value | Hashed | Description
| 0      | 8   |        | No      | Compressed chunk count (=N)
| 8      | 8*N |        | No      | Chunk offsets
| 8+8*N  |     |        | No      | Compressed chunks
|===

Note that decompressed chunks are hashed during verification.

==== Item metadata

Loops while next metadata offset is > 0.

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value | Hashed | Description
| 0      | 8   |        | Yes      | Next metadata offset
| 8      | 4   |        | Yes      | Metadata category (see metadata categories)
| 12     | 4   |        | Yes      | Metadata key (see metadata keys)
| 16     | 4   |        | Yes      | Length of metadata value
|===

=== Image footer

Version 4 of AD1 image contains a footer in the last segment.

[cols="1,1,1,1,5",options="header"]
|===
| Offset | Size | Value | Hashed | Description
| -352   | 352  |       | Yes    | Unknown
|===


== Constants

=== Item types

[cols="1,5",options="header"]
|===
| Value | Description
| 0x0     | Normal file
| 0x5     | Folder
|===

=== Metadata categories

[cols="1,5",options="header"]
|===
| Value | Description
| 0x1     | Item content hashes
| 0x2     | Unknown
| 0x3     | Item size
| 0x4     | Unknown
| 0x5     | Timestamps
|===

=== Metadata keys

==== 1/Hashes

[cols="1,1,5",options="header"]
|===
| Key | Value | Description
| 0x5001  | <md5 hash>  | MD5
| 0x5002  | <sha1 hash> | SHA1
|===

==== 2/Unknown

[cols="1,1,5",options="header"]
|===
| Key | Value | Description
| 0x2   | 1     | Unknown
|===

==== 3/Hashes

[cols="1,1,5",options="header"]
|===
| Key | Value | Description
| 0x3   | <number> | File size
|===

==== 4/Unknown

[cols="1,1,5",options="header"]
|===
| Key | Value | Description
| 0x13  | true/false  | Unknown string
| 0x14   | true/false | Unknown string
| 0x1E   | true/false | Unknown string
| 0x1002  | true/false  | Unknown string
| 0x1003  | true/false  | Unknown string
| 0x1004  | true/false  | Unknown string
| 0x1005  | true/false  | Unknown string
|===

==== 5/Timestamps

[cols="1,1,5",options="header"]
|===
| Key | Value | Description
| 0x7   | <date and time> | Item access time (?)
| 0x8   | <date and time> | Item modification time (?)
| 0x9   | <date and time> | Item creation time (?)
|===

== Image verification

Keeps two hashes "metadata" and "content". The content hash holds digest of all decompressed content. At the end of verification, the hex digest of content hash is added to metadata hash. The hex digest of metadata hash should match log file. In version 4, the image footer is added to metadata hash before the items.
